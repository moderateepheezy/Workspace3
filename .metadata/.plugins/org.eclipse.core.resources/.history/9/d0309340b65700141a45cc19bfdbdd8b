package com.example.chatapp;

import java.util.Arrays;
import java.util.List;

import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.parse.FindCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;
import com.sinch.android.rtc.PushPair;
import com.sinch.android.rtc.messaging.Message;
import com.sinch.android.rtc.messaging.MessageClient;
import com.sinch.android.rtc.messaging.MessageClientListener;
import com.sinch.android.rtc.messaging.MessageDeliveryInfo;
import com.sinch.android.rtc.messaging.MessageFailureInfo;
import com.sinch.android.rtc.messaging.WritableMessage;

public class MessagingActivity extends ActionBarActivity {
	private String recipientId;
	private String messageBody;

	private EditText messageBodyField;
	private ListView messageList;

	private MessageAdapter messageAdapter;

	private MessageService.MessageServiceInterface messageService;
	private String currentUserId;
	private ServiceConnection serviceConnection = new MyServiceConnection();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_messaging);

		bindService(new Intent(this, MessageService.class), serviceConnection,
				BIND_AUTO_CREATE);
		Intent intent = getIntent();
		recipientId = intent.getStringExtra("RECIPIENT_ID");
		currentUserId = ParseUser.getCurrentUser().getObjectId();
		messageList = (ListView) findViewById(R.id.listMessages);
		messageAdapter =new MessageAdapter(this);
		messageList.setAdapter(messageAdapter);
		populateMessageHistory();

		messageBodyField = (EditText) findViewById(R.id.messageBodyField);

		findViewById(R.id.sendButton).setOnClickListener(
				new View.OnClickListener() {

					@Override
					public void onClick(View view) {
						sendMessage();
					}
				});
	}

	public void sendMessage() {
		messageBody = messageBodyField.getText().toString();
		if (messageBody.isEmpty()) {
			Toast.makeText(this, "Please enter a message",
					Toast.LENGTH_LONG).show();
			return;
		}
		messageService.sendMessage(recipientId, messageBody);
		messageBodyField.setText("");
	}

	@Override
	protected void onDestroy() {
		unbindService(serviceConnection);
		super.onDestroy();
	}

	private void populateMessageHistory() {
		String userIds[] = { currentUserId, recipientId };
		ParseQuery<ParseUser> query = ParseUser.getQuery();
		query.whereContainedIn("senderId", Arrays.asList(userIds));
		query.whereContainedIn("recipientId", Arrays.asList(userIds));
		query.orderByAscending("createdAt");
		query.findInBackground(new FindCallback<ParseUser>() {

			@Override
			public void done(List<ParseUser> messageList, ParseException e) {
				if (e == null) {
					for (int i = 0; i < messageList.size(); i++) {
						WritableMessage message = new WritableMessage(
								messageList.get(i).get("recipientId")
										.toString(), messageList.get(i)
										.get("messageText").toString());
						if (messageList.get(i).get("senderId").toString().equals(currentUserId)){
							messageAdapter.addMessage(message, MessageAdapter.DIRECTION_OUTGOING);
						}
						else{
							messageAdapter.addMessage(message, MessageAdapter.DIRECTION_INCOMING);
						}
					}
				}
			}
		});
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.messaging, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public class MyServiceConnection implements ServiceConnection {

		@Override
		public void onServiceConnected(ComponentName componentName,
				IBinder iBinder) {
			messageService = (MessageService.MessageServiceInterface) iBinder;
		}
		
		@Override
		public void onServiceDisconnected(ComponentName componentName) {
			messageService = null;
		}

	}
	
	private class MyMessageClientListener implements MessageClientListener{
		
		@Override
        public void onMessageFailed(MessageClient client, Message message,
                                    MessageFailureInfo failureInfo) {
            Toast.makeText(MessagingActivity.this, "Message failed to send.", Toast.LENGTH_LONG).show();
        }
		
		@Override
        public void onIncomingMessage(MessageClient client, Message message) {
            if (message.getSenderId().equals(recipientId)) {
                WritableMessage writableMessage = new WritableMessage(message.getRecipientIds().get(0), message.getTextBody());
                messageAdapter.addMessage(writableMessage, MessageAdapter.DIRECTION_INCOMING);
            }
        }

        @Override
        public void onMessageSent(MessageClient client, Message message, String recipientId) {

            final WritableMessage writableMessage = new WritableMessage(message.getRecipientIds().get(0), message.getTextBody());

            //only add message to parse database if it doesn't already exist there
            ParseQuery<ParseObject> query = ParseQuery.getQuery("ParseMessage");
            query.whereEqualTo("sinchId", message.getMessageId());
            query.findInBackground(new FindCallback<ParseObject>() {
                @Override
                public void done(List<ParseObject> messageList, com.parse.ParseException e) {
                    if (e == null) {
                        if (messageList.size() == 0) {
                            ParseObject parseMessage = new ParseObject("ParseMessage");
                            parseMessage.put("senderId", currentUserId);
                            parseMessage.put("recipientId", writableMessage.getRecipientIds().get(0));
                            parseMessage.put("messageText", writableMessage.getTextBody());
                            parseMessage.put("sinchId", writableMessage.getMessageId());
                            parseMessage.saveInBackground();

                            messageAdapter.addMessage(writableMessage, MessageAdapter.DIRECTION_OUTGOING);
                        }
                    }
                }
            });
        }

		@Override
		public void onMessageDelivered(MessageClient arg0,
				MessageDeliveryInfo arg1) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onShouldSendPushData(MessageClient arg0, Message arg1,
				List<PushPair> arg2) {
			// TODO Auto-generated method stub
			
		}
	}
}
